event,arg,line,offset,opcode,locals,localObjects
call,,1,-1,<0>,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
line,,1,0,LOAD_BUILD_CLASS,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
opcode,,1,0,LOAD_BUILD_CLASS,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
opcode,,1,2,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
opcode,,1,4,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
opcode,,1,6,MAKE_FUNCTION,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
opcode,,1,8,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
opcode,,1,10,CALL_FUNCTION,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
call,,1,-1,<0>,{},{}
line,,1,0,LOAD_NAME,{},{}
opcode,,1,0,LOAD_NAME,{},{}
opcode,,1,2,STORE_NAME,{},{}
opcode,,1,4,LOAD_CONST,{'__module__': 'createCSV'},{'__module__': 'createCSV'}
opcode,,1,6,STORE_NAME,{'__module__': 'createCSV'},{'__module__': 'createCSV'}
line,,2,8,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,8,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,10,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,12,BINARY_SUBSCR,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
call,,255,-1,<0>,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
line,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
line,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,4,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,6,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,8,CALL_FUNCTION_EX,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
call,,720,-1,<0>,{'self': typing.List},{'self': typing.List}
line,,721,0,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,721,0,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,721,2,LOAD_ATTR,{'self': typing.List},{'self': typing.List}
opcode,,721,4,LOAD_GLOBAL,{'self': typing.List},{'self': typing.List}
opcode,,721,6,COMPARE_OP,{'self': typing.List},{'self': typing.List}
opcode,,721,8,POP_JUMP_IF_FALSE,{'self': typing.List},{'self': typing.List}
line,,723,28,LOAD_GLOBAL,{'self': typing.List},{'self': typing.List}
opcode,,723,28,LOAD_GLOBAL,{'self': typing.List},{'self': typing.List}
opcode,,723,30,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,723,32,LOAD_ATTR,{'self': typing.List},{'self': typing.List}
opcode,,723,34,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,723,36,LOAD_ATTR,{'self': typing.List},{'self': typing.List}
opcode,,723,38,BUILD_TUPLE,{'self': typing.List},{'self': typing.List}
opcode,,723,40,CALL_FUNCTION,{'self': typing.List},{'self': typing.List}
opcode,,723,42,RETURN_VALUE,{'self': typing.List},{'self': typing.List}
return,8302859301439654017,723,42,RETURN_VALUE,{'self': typing.List},{'self': typing.List}
opcode,,258,10,POP_BLOCK,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
return,typing.List[int],258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,2,14,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,16,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,18,BINARY_SUBSCR,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
call,,255,-1,<0>,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
line,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
line,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,4,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,6,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,8,CALL_FUNCTION_EX,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
call,,720,-1,<0>,{'self': typing.List},{'self': typing.List}
line,,721,0,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,721,0,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,721,2,LOAD_ATTR,{'self': typing.List},{'self': typing.List}
opcode,,721,4,LOAD_GLOBAL,{'self': typing.List},{'self': typing.List}
opcode,,721,6,COMPARE_OP,{'self': typing.List},{'self': typing.List}
opcode,,721,8,POP_JUMP_IF_FALSE,{'self': typing.List},{'self': typing.List}
line,,723,28,LOAD_GLOBAL,{'self': typing.List},{'self': typing.List}
opcode,,723,28,LOAD_GLOBAL,{'self': typing.List},{'self': typing.List}
opcode,,723,30,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,723,32,LOAD_ATTR,{'self': typing.List},{'self': typing.List}
opcode,,723,34,LOAD_FAST,{'self': typing.List},{'self': typing.List}
opcode,,723,36,LOAD_ATTR,{'self': typing.List},{'self': typing.List}
opcode,,723,38,BUILD_TUPLE,{'self': typing.List},{'self': typing.List}
opcode,,723,40,CALL_FUNCTION,{'self': typing.List},{'self': typing.List}
opcode,,723,42,RETURN_VALUE,{'self': typing.List},{'self': typing.List}
return,8302859301439654017,723,42,RETURN_VALUE,{'self': typing.List},{'self': typing.List}
opcode,,258,10,POP_BLOCK,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
return,typing.List[int],258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}","{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fc6a8085dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fc6a8085ca0>}"
opcode,,2,20,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,22,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,24,BUILD_CONST_KEY_MAP,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,26,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,28,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,30,MAKE_FUNCTION,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,32,STORE_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}","{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,34,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fc6c83948b0>}","{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fc6c83948b0>}"
opcode,,2,36,RETURN_VALUE,"{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fc6c83948b0>}","{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fc6c83948b0>}"
return,,2,36,RETURN_VALUE,"{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fc6c83948b0>}","{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fc6c83948b0>}"
opcode,,1,12,STORE_NAME,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>}"
line,,19,14,LOAD_NAME,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}"
opcode,,19,14,LOAD_NAME,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}"
opcode,,19,16,CALL_FUNCTION,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}"
opcode,,19,18,STORE_NAME,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>}"
line,,20,20,LOAD_NAME,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,20,LOAD_NAME,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,22,LOAD_METHOD,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,24,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,26,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,28,BUILD_LIST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,30,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,32,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,34,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,36,BUILD_LIST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,38,CALL_METHOD,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
call,,2,-1,<0>,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
line,,3,0,LOAD_GLOBAL,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,0,LOAD_GLOBAL,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,2,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,4,CALL_FUNCTION,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,6,LOAD_GLOBAL,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,8,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,10,CALL_FUNCTION,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,12,ROT_TWO,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,14,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5]}"
opcode,,3,16,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2}"
line,,4,18,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,18,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,20,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,22,BINARY_ADD,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,24,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,26,BINARY_FLOOR_DIVIDE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,28,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,30,BINARY_ADD,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
opcode,,4,32,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3}"
line,,5,34,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}"
opcode,,5,34,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}"
opcode,,5,36,DUP_TOP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}"
opcode,,5,38,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3}"
opcode,,5,40,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None}"
line,,6,42,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}"
opcode,,6,42,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}"
opcode,,6,44,DUP_TOP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}"
opcode,,6,46,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None}"
opcode,,6,48,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0}"
line,,8,50,LOAD_GLOBAL,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}"
opcode,,8,50,LOAD_GLOBAL,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}"
opcode,,8,52,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}"
opcode,,8,54,CALL_FUNCTION,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}"
opcode,,8,56,GET_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}"
opcode,,8,58,FOR_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}"
opcode,,8,60,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0}"
line,,9,62,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,9,62,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,9,64,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
line,,10,66,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,66,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,68,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,70,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,72,POP_JUMP_IF_TRUE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,74,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,76,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,78,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,80,POP_JUMP_IF_FALSE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,82,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,84,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,86,BINARY_SUBSCR,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,88,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,90,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,92,BINARY_SUBSCR,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,94,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,10,96,POP_JUMP_IF_FALSE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
line,,11,98,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,11,98,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,11,100,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,11,102,BINARY_SUBSCR,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
opcode,,11,104,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': None, 'i': 0, 'j': 0, '_': 0}"
line,,12,106,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}"
opcode,,12,106,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}"
opcode,,12,108,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}"
opcode,,12,110,INPLACE_ADD,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}"
opcode,,12,112,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 0, 'j': 0, '_': 0}"
opcode,,12,114,JUMP_ABSOLUTE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}"
line,,8,58,FOR_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}"
opcode,,8,58,FOR_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}"
opcode,,8,60,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 0}"
line,,9,62,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,9,62,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,9,64,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': None, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
line,,10,66,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,66,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,68,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,70,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,72,POP_JUMP_IF_TRUE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,74,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,76,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,78,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,80,POP_JUMP_IF_FALSE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,82,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,84,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,86,BINARY_SUBSCR,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,88,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,90,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,92,BINARY_SUBSCR,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,94,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,10,96,POP_JUMP_IF_FALSE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
line,,11,98,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,11,98,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,11,100,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,11,102,BINARY_SUBSCR,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
opcode,,11,104,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 1, 'i': 1, 'j': 0, '_': 1}"
line,,12,106,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}"
opcode,,12,106,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}"
opcode,,12,108,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}"
opcode,,12,110,INPLACE_ADD,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}"
opcode,,12,112,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 1, 'j': 0, '_': 1}"
opcode,,12,114,JUMP_ABSOLUTE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}"
line,,8,58,FOR_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}"
opcode,,8,58,FOR_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}"
opcode,,8,60,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 1}"
line,,9,62,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,9,62,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,9,64,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 1, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
line,,10,66,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,66,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,68,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,70,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,72,POP_JUMP_IF_TRUE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,74,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,76,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,78,COMPARE_OP,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,10,80,POP_JUMP_IF_FALSE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
line,,14,116,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,14,116,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,14,118,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,14,120,BINARY_SUBSCR,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
opcode,,14,122,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 2, 'i': 2, 'j': 0, '_': 2}"
line,,15,124,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}"
opcode,,15,124,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}"
opcode,,15,126,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}"
opcode,,15,128,INPLACE_ADD,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}"
opcode,,15,130,STORE_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 0, '_': 2}"
opcode,,15,132,JUMP_ABSOLUTE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
line,,8,58,FOR_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,8,58,FOR_ITER,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
line,,17,134,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,134,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,136,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,138,BINARY_ADD,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,140,LOAD_CONST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,142,BINARY_MODULO,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,144,POP_JUMP_IF_FALSE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,146,LOAD_FAST,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,17,148,RETURN_VALUE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
return,3,17,148,RETURN_VALUE,"{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}","{'self': <createCSV.Solution object at 0x7fc6c838dcd0>, 'nums1': [1, 2], 'nums2': [3, 4, 5], 'm': 2, 'n': 3, 'mid': 3, 'prev2': 2, 'prev1': 3, 'i': 2, 'j': 1, '_': 2}"
opcode,,20,40,POP_TOP,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,42,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
opcode,,20,44,RETURN_VALUE,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
return,,20,44,RETURN_VALUE,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}","{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2\n\nsolution = Solution()\nsolution.findMedianSortedArrays([1,2],[3,4,5])', 'f': <_io.TextIOWrapper name='algoData74b59524-160c-4525-9ae4-e8d18f87e555.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fc6c83ae720>, 'Solution': <class 'createCSV.Solution'>, 'solution': <createCSV.Solution object at 0x7fc6c838dcd0>}"
