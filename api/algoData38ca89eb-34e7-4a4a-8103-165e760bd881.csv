event,arg,line,offset,opcode,locals
call,,1,-1,<0>,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
line,,1,0,LOAD_BUILD_CLASS,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
opcode,,1,0,LOAD_BUILD_CLASS,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
opcode,,1,2,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
opcode,,1,4,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
opcode,,1,6,MAKE_FUNCTION,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
opcode,,1,8,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
opcode,,1,10,CALL_FUNCTION,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
call,,1,-1,<0>,{}
line,,1,0,LOAD_NAME,{}
opcode,,1,0,LOAD_NAME,{}
opcode,,1,2,STORE_NAME,{}
opcode,,1,4,LOAD_CONST,{'__module__': 'createCSV'}
opcode,,1,6,STORE_NAME,{'__module__': 'createCSV'}
line,,2,8,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,8,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,10,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,12,BINARY_SUBSCR,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
call,,255,-1,<0>,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
line,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
line,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,4,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,6,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,8,CALL_FUNCTION_EX,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
call,,720,-1,<0>,{'self': typing.List}
line,,721,0,LOAD_FAST,{'self': typing.List}
opcode,,721,0,LOAD_FAST,{'self': typing.List}
opcode,,721,2,LOAD_ATTR,{'self': typing.List}
opcode,,721,4,LOAD_GLOBAL,{'self': typing.List}
opcode,,721,6,COMPARE_OP,{'self': typing.List}
opcode,,721,8,POP_JUMP_IF_FALSE,{'self': typing.List}
line,,723,28,LOAD_GLOBAL,{'self': typing.List}
opcode,,723,28,LOAD_GLOBAL,{'self': typing.List}
opcode,,723,30,LOAD_FAST,{'self': typing.List}
opcode,,723,32,LOAD_ATTR,{'self': typing.List}
opcode,,723,34,LOAD_FAST,{'self': typing.List}
opcode,,723,36,LOAD_ATTR,{'self': typing.List}
opcode,,723,38,BUILD_TUPLE,{'self': typing.List}
opcode,,723,40,CALL_FUNCTION,{'self': typing.List}
opcode,,723,42,RETURN_VALUE,{'self': typing.List}
return,4306753445440184216,723,42,RETURN_VALUE,{'self': typing.List}
opcode,,258,10,POP_BLOCK,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
return,typing.List[int],258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,2,14,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,16,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,18,BINARY_SUBSCR,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
call,,255,-1,<0>,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
line,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,257,0,SETUP_FINALLY,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
line,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,2,LOAD_DEREF,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,4,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,6,LOAD_FAST,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,8,CALL_FUNCTION_EX,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
call,,720,-1,<0>,{'self': typing.List}
line,,721,0,LOAD_FAST,{'self': typing.List}
opcode,,721,0,LOAD_FAST,{'self': typing.List}
opcode,,721,2,LOAD_ATTR,{'self': typing.List}
opcode,,721,4,LOAD_GLOBAL,{'self': typing.List}
opcode,,721,6,COMPARE_OP,{'self': typing.List}
opcode,,721,8,POP_JUMP_IF_FALSE,{'self': typing.List}
line,,723,28,LOAD_GLOBAL,{'self': typing.List}
opcode,,723,28,LOAD_GLOBAL,{'self': typing.List}
opcode,,723,30,LOAD_FAST,{'self': typing.List}
opcode,,723,32,LOAD_ATTR,{'self': typing.List}
opcode,,723,34,LOAD_FAST,{'self': typing.List}
opcode,,723,36,LOAD_ATTR,{'self': typing.List}
opcode,,723,38,BUILD_TUPLE,{'self': typing.List}
opcode,,723,40,CALL_FUNCTION,{'self': typing.List}
opcode,,723,42,RETURN_VALUE,{'self': typing.List}
return,4306753445440184216,723,42,RETURN_VALUE,{'self': typing.List}
opcode,,258,10,POP_BLOCK,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
return,typing.List[int],258,12,RETURN_VALUE,"{'args': (typing.List, <class 'int'>), 'kwds': {}, 'cached': <functools._lru_cache_wrapper object at 0x7fd1f01a6dc0>, 'func': <function _GenericAlias.__getitem__ at 0x7fd1f01a6ca0>}"
opcode,,2,20,LOAD_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,22,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,24,BUILD_CONST_KEY_MAP,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,26,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,28,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,30,MAKE_FUNCTION,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,32,STORE_NAME,"{'__module__': 'createCSV', '__qualname__': 'Solution'}"
opcode,,2,34,LOAD_CONST,"{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fd20087b3a0>}"
opcode,,2,36,RETURN_VALUE,"{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fd20087b3a0>}"
return,,2,36,RETURN_VALUE,"{'__module__': 'createCSV', '__qualname__': 'Solution', 'findMedianSortedArrays': <function Solution.findMedianSortedArrays at 0x7fd20087b3a0>}"
opcode,,1,12,STORE_NAME,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>}"
opcode,,1,14,LOAD_CONST,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>, 'Solution': <class 'createCSV.Solution'>}"
opcode,,1,16,RETURN_VALUE,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>, 'Solution': <class 'createCSV.Solution'>}"
return,,1,16,RETURN_VALUE,"{'functionCallString': 'class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        mid = (m + n) // 2 + 1\n        prev2 = prev1 = None\n        i = j = 0\n\n        for _ in range(mid):\n            prev2 = prev1\n            if j == n or (i != m and nums1[i] <= nums2[j]):\n                prev1 = nums1[i]\n                i += 1\n            else:\n                prev1 = nums2[j]\n                j += 1\n        \n        return prev1 if (m + n) % 2 else (prev1 + prev2) / 2', 'f': <_io.TextIOWrapper name='algoData38ca89eb-34e7-4a4a-8103-165e760bd881.csv' mode='w' encoding='UTF-8'>, 'writer': <_csv.writer object at 0x7fd20087a720>, 'Solution': <class 'createCSV.Solution'>}"
